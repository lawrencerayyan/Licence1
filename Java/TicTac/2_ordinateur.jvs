/*nous avons ajouter sleep à la fonction joueur
parce que le code ne donne pas un gagnant sans sleep
 Si il ne a pas donné un gagnat il faut augmenter la valeur de sleep*/
final int taille = laTaille();

void main() {
    int arene[][] = new int[taille][taille];
    int tab_cache[][] = new int[taille][taille];
    tour(arene, tab_cache);
}
///// choisir la taille de l'arene
int laTaille() {
    int taille = readInt("choisissez la taille de la arene") + 1;
    while (taille <= 2) taille = readInt("Merci de choisir une taille plus grande que 1") + 1;
    return taille;
}
//////////////////////////////// Parti des joueurs//////////////////////////////////
///// chenger le tour entre les deux joueurs
void tour(int arene[][], int tab_cache[][]) {
    int temp = 1;

    /// boucle infini tant que le fonction gagnant est false
    while (!gagnant(tab_cache)) {
        affichage(arene);
        if (temp == 3) swap(arene, tab_cache);
        if (temp % 2 != 0) joueur(arene, tab_cache, 1);
        else joueur(arene, tab_cache, 2);
        temp++;
        clear();
    }
    affichage(arene);
    termine(temp);
}
///// swap
////// on fait un échange entre les cellule après de finir le premiere tour,si le joueur 2 veut
void swap(int arene[][], int tab_cache[][]) {
    int temp = readInt("J2: vous voulez échanger le cellule avec J1?oui/1,non/2");
    if (temp == 1) chSwap(arene, tab_cache);
}

void chSwap(int arene[][], int tab_cache[][]) {
    for (int i = 1; i < tab_cache.length; i++) {
        for (int j = 1; j < tab_cache.length; j++) {
            if (arene[i][j] == 1) {
                arene[i][j] = 2;
                tab_cache[i][j] = 2;
                valeur(tab_cache, i, j, 2);
            } else if (arene[i][j] == 2) {
                arene[i][j] = 1;
                tab_cache[i][j] = 1;
                valeur(tab_cache, i, j, 1);
            }
        }
    }
    clear();
    affichage(arene);
}

//////////////// les deux joueurs sont des humans/////////
//////// demander des joueurs d'entrer les cordonées
void joueur(int arene[][], int tab_cache[][], int j) {
    int x, y;
    x = random(1, taille);
    sleep(100);
    y = random(1, taille);
    // on envoie les cordonees au fonction vide pour tester si la cellule est disponible
    // si la cellule n'est pas disponible, on re-demande a l'utilisateur
    while (!vide(tab_cache, x, y)) {
        x = random(1, taille);
        sleep(100);
        y = random(1, taille);
    }

    arene[x][y] = j;
    valeur(tab_cache, x, y, j);
    if (test4_5(tab_cache, j) == true) {
        if (balayage(tab_cache, j) == true) {
            balayage(tab_cache, j);
        }
    }
}
//// test si le cellule est disponible
boolean vide(int tab_cache[][], int x, int y) {
    if (x < tab_cache.length
            && x > 0
            && y < tab_cache.length
            && y > 0
            && tab_cache[x][y] == 0) {
        return true;
    } else return false;
}
///// préciser la valeur de chaque cellule de l'arene cache
//// jouer 1 =4
//// jouer 2 =5
int valeur(int tab_cache[][], int x, int y, int j) {
    if (x == 1 && j == 1) tab_cache[x][y] = 4;
    else if (y == 1 && j == 2) tab_cache[x][y] = 5;
    else tab_cache[x][y] = j;
    return 0;
}

///////////////////////////// Parti de balayage//////////////////////////////////
boolean test4_5(int tab_cache[][], int t) {
    for (int i = 1; i < tab_cache.length; i++) {
        for (int j = 1; j < tab_cache.length; j++) {
            if (tab_cache[1][j] == 4 || tab_cache[i][1] == 5) return true;
        }
    }
    return false;
}

boolean balayage(int[][] tab_cache, int joueur) {
    int temp;
    if (joueur == 1) temp = 4;
    else temp = 5;
    for (int i = 0; i < tab_cache.length; i++) {
        for (int j = 0; j < tab_cache[i].length; j++) {
            if (tab_cache[i][j] == joueur
                    && ((j < tab_cache[i].length - 1 && tab_cache[i][j + 1] == temp)
                            || (i > 0 && tab_cache[i - 1][j] == temp)
                            || (i > 0
                                    && j < tab_cache[i].length - 1
                                    && tab_cache[i - 1][j + 1] == temp)
                            || (j > 0 && tab_cache[i][j - 1] == temp)
                            || (j > 0
                                    && i < tab_cache[i].length - 1
                                    && tab_cache[i + 1][j - 1] == temp)
                            || (i < tab_cache[i].length - 1 && tab_cache[i + 1][j] == temp))) {
                tab_cache[i][j] = temp;
                return true;
            }
        }
    }
    return false;
}
///////////////////////////////// Parti test si il y a un gagnant///////////////////////////////

boolean gagnant(int tab_cache[][]) {
    for (int i = 1; i < tab_cache.length; i++) {
        for (int j = 1; j < tab_cache.length; j++) {
            if (tab_cache[tab_cache.length - 1][j] == 4
                    || tab_cache[i][tab_cache.length - 1] == 5) return true;
        }
    }
    return false;
}
/////////////////////////////////// Parti d'affichage/////////////////////////////////////
////// affichage arene 1_2
void affichage(int arene[][]) {
    for (int i = 0; i < arene.length; i++) {
        for (int j = 0; j < arene.length; j++) {
            if (i == 0 && j == 0) print("  ");
            else if (i == 0 && j < 10) print(j + "  ");
            else if (i == 0 && j > 9) print(j + " ");
            else if (j == 0 && i > 0) {
                bordGouche(i);
                if (i < 10) print(i + "  ");
                else if (i > 9) print(i + " ");
            } else if (j < 11) print(arene[i][j] + "  ");
            else if (j > 9) print(arene[i][j] + " ");
        }
        println();
    }
}

void bordGouche(int temp) {
    for (int i = 0; i < temp - 1; i++) {
        print(" ");
    }
}
////// il afiche le gagnant
void termine(int temp) {
    if (temp % 2 == 0) print("jouer 1 a gagné");
    else print("jouer 2 a gagné");
}
